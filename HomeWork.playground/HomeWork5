import UIKit

//  1. Напишите замыкание, которое выводит на экран приветствие "Привет, мир!"

let sayHelloWorld = { print("Привет, мир!") }
sayHelloWorld()

//  2. Напишите замыкание, которое принимает два числа и возвращает их сумму.

let sumNumbers = { (num1: Int, num2: Int) in return num1 + num2 }
sumNumbers(11, 23)

//  3. Напишите замыкание, которое принимает строку и возвращает ее длину.

let lengthString = { (string: String) in return string.count }
lengthString("Hello, world!")

//  4. Напишите замыкание, которое принимает массив чисел и возвращает сумму всех элементов массива.

let sumAllNum = { (arrayNum: [Int]) in return arrayNum.reduce(0, +) }
sumAllNum([1, 2, 3, 4])

//  5. Напишите замыкание, которое проверяет, является ли число четным, и возвращает true или false.

let isEven = { (num: Int) in return num % 2 == 0 }
isEven(6)
isEven(5)

//  6. Напишите замыкание, которое принимает два числа и возвращает большее из них.

let maxNum = { (num1: Int, num2: Int) in return max(num1, num2) }
maxNum(10, 11)

//  7. Напишите замыкание, которое принимает строку и преобразует ее в верхний регистр.

let upperString = { (str: String) in return str.uppercased() }
upperString("Hello, world!")

//  8. Напишите замыкание, которое принимает массив строк и выводит каждую строку на новой строке.

let newLineString = { (arrayString: [String]) in print(arrayString.joined(separator: "\n")) }
newLineString(["Hello", "world"])

//  9. Напишите замыкание, которое принимает массив чисел и возвращает новый массив с квадратами всех элементов.

let arraySquare = { (arrayNum: [Int]) in return arrayNum.map { num in return num * num } }
arraySquare([1, 2, 3])

//  10. Напишите замыкание, которое принимает два числа и возвращает их разность.

let diff = { (a: Int, b: Int) in return a - b }
diff(7, 3)

//  11. Напишите замыкание, которое принимает опциональную строку и возвращает ее длину, если она не nil.

let stringLength = { (str: String?) -> Int? in
    if let str = str { return str.count }
    else { return nil } }
stringLength("Hello")

//  12. Напишите замыкание, которое принимает два числа и возвращает их произведение.

let mult = { (a: Int, b: Int) in return a * b }
mult(7, 3)

//  13. Напишите замыкание, которое принимает массив строк и возвращает новый массив с длиной каждой строки.

let arrayLengthString = { (arrayString: [String]) in return arrayString.map { $0.count } }
arrayLengthString(["string", "hello"])

//  14. Напишите замыкание, которое принимает число и возвращает его в обратном порядке.

let reverse = { (num: Int) -> Int in
    let reversedString = String(abs(num)).reversed()
    let reversedNumber = Int(String(reversedString)) ?? 0
    return num >= 0 ? reversedNumber : -reversedNumber
}
reverse(727890)

//  15. Напишите замыкание, которое принимает массив чисел и возвращает новый массив с только положительными числами.

let arrayPositive = { (arrayNum: [Int]) in return arrayNum.filter { $0 > 0 }}
arrayPositive([1, -2, -3, 3, -8, 364, -234])

//  16. Напишите замыкание, которое принимает два числа и возвращает true, если они равны, и false в противном случае.

let isEqual = { (num1: Int, num2: Int) in return num1 == num2 }
isEqual(7, 3)

//  17. Напишите замыкание, которое принимает строку и возвращает true, если она является палиндромом, и false в противном случае.

let isPalindrome = { (str: String) in
    let cleaned = str.filter { $0.isLetter }.lowercased()
    return Array(cleaned) == cleaned.reversed()
    }
isPalindrome("Ah, Satan sees Natasha")

//  18. Напишите замыкание, которое принимает массив чисел и возвращает среднее значение.

let avg = { (arrayNum: [Int]) in return Double(arrayNum.reduce(0, +)) / Double(arrayNum.count) }
avg([3, 11, 6, 4, 45])

//  19. Напишите замыкание, которое принимает массив чисел и возвращает массив только с четными числами.

let arrayEven = { (arrayNum: [Int]) in return arrayNum.filter { $0 % 2 == 0 } }
arrayEven([2, -4, 12, 3, -7, 334, 0])

//  20. Напишите замыкание, которое принимает строку и возвращает ее без пробелов.

let stringNoSpace = { (str: String) in return str.split(separator: " ").joined() }
stringNoSpace("Ah, Satan sees Natasha")


//  1. Создайте перечисление `Weekdays`, представляющее дни недели.

enum Weekdays {
    case monday
    case tuesday
    case wednesday
    case thursday
    case friday
    case saturday
    case sunday
}

//  2. Объявите перечисление `Months`, включающее названия всех месяцев года.

enum Months {
    case january
    case february
    case march
    case april
    case may
    case june
    case july
    case august
    case september
    case october
    case november
    case december
}

//  3. Определите перечисление `Direction`, представляющее четыре основных направления: север, юг, восток и запад.

enum Direction {
    case north
    case south
    case east
    case west
}

//  4. Создайте перечисление `Coin`, содержащее номиналы монет: penny, nickel, dime и quarter.

enum Coin: Double {
    case penny = 0.01
    case nickel = 0.05
    case dime = 0.10
    case quarter = 0.25
}

//  5. Объявите перечисление `TrafficLight`, представляющее цвета светофора: красный, желтый и зеленый.

enum TrafficLight {
    case red
    case yellow
    case green
}
//  6. Определите перечисление `Suit`, представляющее масти игральных карт: пики, червы, бубны и трефы.

enum Suit {
    case spades, hearts, diamonds, clubs
}
//  7. Создайте перечисление `Daytime`, содержащее периоды суток: утро, день, вечер и ночь.

enum Daytime {
    case morning, day, evening, night
}

//  8. Объявите перечисление `DirectionArrow`, представляющее стрелки направлений: вверх, вниз, влево и вправо.

enum DirectionArrow {
    case up, down, left, right
}
//  9. Определите перечисление `Weather`, содержащее погодные условия: солнечно, дождливо, облачно и ветрено.

enum Weather {
    case sunny, rainy, cloudy, windy
}
//  10. Создайте перечисление `Season`, представляющее времена года: весна, лето, осень и зима.

enum Season {
    case spring, summer, autumn, winter
}

//  11. Создайте перечисление `CardSuit`, представляющее масти игральных карт: пики, червы, бубны и трефы. Напишите функцию, которая принимает масть карты и возвращает ее название на русском.

func suitCardTranslate(suit: Suit) -> String {
    switch suit {
    case .spades:
        return "пики"
    case .hearts:
        return "червы"
    case .diamonds:
        return "бубны"
    case .clubs:
        return "трефы"
    }
}
suitCardTranslate(suit: Suit.clubs)

//  12. Объявите перечисление `ShapeType`, представляющее различные типы геометрических фигур: круг, квадрат, треугольник и прямоугольник. Напишите функцию, которая принимает тип фигуры и возвращает ее площадь.

enum ShapeType {
    case circle(radius: Double)
    case square(side: Double)
    case triangle(base: Double, height: Double)
    case rectangle(width: Double, height: Double)
}

func areaFigure(figure: ShapeType) -> Double {
    switch figure {
    case .circle(let radius):
        return Double.pi * (radius * radius)
    case .square(let side):
        return side * side
    case .triangle(let base, let height):
        return (base * height) / 2
    case .rectangle(let width, let height):
        return width * height
    }
}
    
let myCircle = ShapeType.circle(radius: 7.7)
let myRectangle = ShapeType.rectangle(width: 3, height: 10)
    
//  13. Определите перечисление `TrafficSignal`, содержащее типы светофорных сигналов: красный, желтый и зеленый. Напишите функцию, которая принимает сигнал и возвращает время его длительности в секундах.

enum TrafficSignal {
    case red(timeSec: Int)
    case yellow(timeSec: Int)
    case green(timeSec: Int)
}

func timeTrafficSignal(trafficSignal: TrafficSignal) -> Int {
    switch trafficSignal {
    case .red(let time):
        return time
    case .yellow(let time):
        return time
    case .green(let time):
        return time
    }
}

let signalTime = TrafficSignal.green(timeSec: 300)

//  14. Создайте перечисление `DayType`, представляющее дни недели: будний день и выходной день. Напишите функцию, которая принимает день недели и возвращает его тип.

enum DayType {
    case weekday, dayoff
   }

func getDayType(day: Weekdays) -> DayType {
    switch day {
    case .saturday, .sunday:
        return DayType.dayoff
    default:
        return DayType.weekday
    }
}

let today = Weekdays.friday
let tomorrow = Weekdays.saturday

//  15. Объявите перечисление `Temperature`, содержащее типы температур: низкая, средняя и высокая. Напишите функцию, которая принимает температуру в градусах Цельсия и возвращает ее тип.

enum Temperature {
    case low, medium, high
}

func getTemperatureType(celsi: Int) -> Temperature {
    switch celsi {
    case -Int.max...10:
        return .low
    case 11...20:
        return .medium
    default:
        return .high
    }
}

getTemperatureType(celsi: 30)
getTemperatureType(celsi: -20)

//  16. Определите перечисление `TrafficLightState`, представляющее состояния светофора: включен, выключен и мигающий. Напишите функцию, которая принимает состояние светофора и возвращает соответствующее ему описание.

enum TrafficLightState {
    case on, off, flashing
}

func getTrafficStateDescription(state: TrafficLightState) -> String {
    switch state {
    case .flashing:
        return "Светофор мигает"
    case .off:
        return "Светофор выключен"
    case .on:
        return "Светофор включен"
    }
}

let trafficState = TrafficLightState.flashing
print(getTrafficStateDescription(state: trafficState))

//  17. Создайте перечисление `DirectionType`, содержащее направления движения: вперед, назад, влево и вправо. Напишите функцию, которая принимает два направления и определяет, являются ли они противоположными.

enum DirectionType {
    case forward, backward, left, right
}

func opposite(directionOne: DirectionType, directionTwo: DirectionType) -> String {
    switch (directionOne, directionTwo) {
    case (.forward, .backward), (.backward, .forward):
        return "Противоположные направления"
    case (.left, .right), (.right, .left):
        return "Противоположные направления"
    default:
        return "Не противоположные направления"
    }
}

let direct1 = DirectionType.backward
let direct2 = DirectionType.left


//  18. Объявите перечисление `OperatingSystem`, представляющее операционные системы: iOS, Android, Windows и macOS. Напишите функцию, которая принимает операционную систему и возвращает ее популярность среди пользователей.

enum OperatingSystem {
    case iOS, Android, Windows, macOS
}

func getOSPopularity(os: OperatingSystem) -> String {
    switch os {
    case .iOS:
        return "iOS: высокая популярность среди пользователей iPhone и iPad"
    case .Android:
        return "Android: самая популярная мобильная ОС в мире"
    case .Windows:
        return "Windows: доминирует среди настольных компьютеров"
    case .macOS:
        return "macOS: популярна среди пользователей компьютеров Apple"
    }
}

//  19. Определите перечисление `PaymentMethod`, содержащее способы оплаты: наличные, кредитная карта, электронные деньги и банковский перевод. Напишите функцию, которая принимает способ оплаты и возвращает его комиссию.

enum PaymentMethod {
    case cash(comission: Double)
    case creditCard(comission: Double)
    case digitalMoney(comission: Double)
    case bankTransfer(comission: Double)
}

func getComissionBank(method: PaymentMethod) -> Double {
    switch method {
    case .bankTransfer(let percent), .cash(let percent),
         .creditCard(let percent), .digitalMoney(let percent):
        return percent
    }
}

let comissionMethodBT = PaymentMethod.bankTransfer(comission: 2.5)

//  20. Создайте перечисление `WeatherCondition`, содержащее погодные условия: ясно, облачно, дождь и снег. Напишите функцию, которая принимает погодные условия и возвращает рекомендацию по одежде.

enum WeatherCondtition {
    case sunday
    case cloudy
    case rain
    case snow
}

func getRecomClothing(weather: WeatherCondtition) -> String {
    switch weather {
    case .sunday:
        return "Можно одеться легко!"
    case .cloudy:
        return "Куртка не помешает!"
    case .rain:
        return "Дождевик нужен обязательно!"
    case .snow:
        return "Валенки и пуховик !"
    }
}
let weatherToday = WeatherCondtition.cloudy
